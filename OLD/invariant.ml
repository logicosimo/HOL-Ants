let INVARIANT_INHABITANTS = new_definition
  `INVARIANT_INHABITANTS st s <=> KEYS (ST_INHABITANTS st) SUBSET s`;;

let INVARIANT_STIGMERGY1 = new_definition
  `INVARIANT_STIGMERGY1 (st:status) <=>
   INVARIANT_INHABITANTS st (0..5) /\
   GET (ST_STIGMERGY st) 1 > GET (ST_STIGMERGY st) 2 /\
   GET (ST_STIGMERGY st) 1 > GET (ST_STIGMERGY st) 3 /\
   CARD (GET (ST_INHABITANTS st) 1) > CARD (GET (ST_INHABITANTS st) 2) /\
   CARD (GET (ST_INHABITANTS st) 1) > CARD (GET (ST_INHABITANTS st) 3)`;;

let ON_PATH_1 = new_definition
  `ON_PATH_1 st <=> INVARIANT_INHABITANTS st {0,1,4}`;;

let INVARIANT_INHABITANTS_ANT_STEP = prove
 (`!st. INVARIANT_INHABITANTS st (0..4) /\ a IN KEYS (ST_ANTS st)
        ==> IMAGE FST (ANT_STEP (ST_STIGMERGY st) (GET (ST_ANTS st) a)) SUBSET
            (0..4)`,
  REWRITE_TAC[INVARIANT_INHABITANTS; SUBSET;
              FORALL_IN_KEYS_ST_INHABITANTS] THEN
  GEN_TAC THEN STRIP_TAC THEN
  CLAIM_TAC "@p dir. a" `?p dir. GET (ST_ANTS st) a = p,dir` THENL
  [MESON_TAC[PAIR_SURJECTIVE]; ASM_REWRITE_TAC[]] THEN
  REWRITE_TAC[FORALL_IN_IMAGE; ANT_STEP] THEN REPEAT COND_CASES_TAC THEN
  SIMP_TAC[IN_INSERT; NOT_IN_EMPTY; IN_NUMSEG; DISJ_IMP_THM] THEN
  NUM_REDUCE_TAC);;

let ANT_STEP_INVARIANT = prove
 (`!st. INVARIANT_STIGMERGY1 st /\ ON_PATH_1 st /\ a IN KEYS (ST_ANTS st)
        ==> IMAGE FST (ANT_STEP (ST_STIGMERGY st) (GET (ST_ANTS st) a)) SUBSET
            {0,1,4}`,
  REPEAT GEN_TAC THEN
  REWRITE_TAC[INVARIANT_STIGMERGY1; INVARIANT_INHABITANTS; ON_PATH_1; SUBSET;
              FORALL_IN_KEYS_ST_INHABITANTS; FORALL_IN_INSERT;
              NOT_IN_EMPTY; FORALL_IN_IMAGE; FORALL_PAIR_THM] THEN
  INTRO_TAC "(inhab s21 s31 i21 i31) hp1 hp2" THEN
  CLAIM_TAC "@p dir. a" `?p dir. GET (ST_ANTS st) a = p,dir` THENL
  [MESON_TAC[PAIR_SURJECTIVE]; ASM_REWRITE_TAC[]] THEN
  INTRO_TAC "![p'] [dir']" THEN REWRITE_TAC[ANT_STEP] THEN COND_CASES_TAC THENL
  [POP_ASSUM SUBST_VAR_TAC THEN
   SUBGOAL_THEN `~(GET (ST_STIGMERGY st) 1 < GET (ST_STIGMERGY st) 2)`
                (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s21" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   SUBGOAL_THEN `GET (ST_STIGMERGY st) 2 < GET (ST_STIGMERGY st) 1`
                (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s21" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; PAIR_EQ] THEN SIMP_TAC[];
   ALL_TAC] THEN
  COND_CASES_TAC THENL
  [POP_ASSUM SUBST_VAR_TAC THEN
   SUBGOAL_THEN `~(GET (ST_STIGMERGY st) 1 < GET (ST_STIGMERGY st) 3)`
                (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s31" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   SUBGOAL_THEN `GET (ST_STIGMERGY st) 3 < GET (ST_STIGMERGY st) 1`
                (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s31" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; PAIR_EQ] THEN SIMP_TAC[];
   ALL_TAC] THEN
  SUBGOAL_THEN `~(p = 2)` (fun th -> REWRITE_TAC[th]) THENL
  [REMOVE_THEN "hp1" (MP_TAC o SPEC `a:num`) THEN
   ASM_SIMP_TAC[IN_INSERT; NOT_IN_EMPTY] THEN NUM_REDUCE_TAC;
   ALL_TAC] THEN
  SUBGOAL_THEN `~(p = 3)` (fun th -> REWRITE_TAC[th]) THENL
  [REMOVE_THEN "hp1" (MP_TAC o SPEC `a:num`) THEN
   ASM_SIMP_TAC[IN_INSERT; NOT_IN_EMPTY] THEN NUM_REDUCE_TAC;
   ALL_TAC] THEN
  REPEAT (COND_CASES_TAC THEN
    REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; PAIR_EQ] THEN SIMP_TAC[]));;

(* g `!st. {1,2,3} SUBSET KEYS (ST_INHABITANTS st) /\ ON_PATH_1 st
        ==> !s. s IN EVOLUTION_STEP st ==> ON_PATH_1 s`;;
GEN_TAC
REWRITE_TAC[INVARIANT; SUBSET; FORALL_IN_INSERT; NOT_IN_EMPTY; GE; ON_PATH_1]
INTRO_TAC "(k1 k2 k3) p1"
REWRITE_TAC[EVOLUTION_STEP; FORALL_IN_IMAGE; IN_DICT_COLLECT; KEYS_DICT_MAP; GET_DICT_MAP]
SIMP_TAC[]
INTRO_TAC "![d]; keys get"


g `!st. INVARIANT st
        ==> eventually (\n. ON_PATH_1 (EVOLUTION st n)) sequentially`;;

GEN_TAC
REWRITE_TAC[INVARIANT; SUBSET; FORALL_IN_INSERT; NOT_IN_EMPTY; GE]
INTRO_TAC "(k1 k2 k3) s21 s31 i21 i31"
REWRITE_TAC[EVENTUALLY_SEQUENTIALLY]
EXISTS_TAC `2` *)
