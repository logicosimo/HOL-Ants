let PATH0 = new_definition
  `PATH0 (st:status) <=>
   {1,2,3} SUBSET KEYS (DICT_MAP CARD (ST_INHABITANTS st)) /\
   GET (ST_STIGMERGY st) 1 > GET (ST_STIGMERGY st) 2 /\
   GET (ST_STIGMERGY st) 1 > GET (ST_STIGMERGY st) 3 /\
   CARD (GET (ST_INHABITANTS st) 1) > CARD (GET (ST_INHABITANTS st) 2) /\
   CARD (GET (ST_INHABITANTS st) 1) > CARD (GET (ST_INHABITANTS st) 3)`;;

let PATH1 = new_definition
  `PATH1 (st:status) <=>
   !a. a IN KEYS (ST_ANTS st) ==> FST (GET (ST_ANTS st) a) IN {0,1,4}`;;

let ANT_STEP_INVARIANT = prove
 (`!st a dir. PATH0 st /\ PATH1 st /\ a IN KEYS (ST_ANTS st)
              ==> !(p,dir'). (p,dir') IN (ANT_STEP (ST_STIGMERGY st)
                                                   (GET (ST_ANTS st) a))
                             ==> p IN {0,1,4}`,
  REPEAT GEN_TAC THEN REWRITE_TAC[PATH0; PATH1; SUBSET; FORALL_IN_INSERT; NOT_IN_EMPTY] THEN
  INTRO_TAC "((k1 k2 k3) s21 s31 i21 i31) hp1 hp2" THEN
  CLAIM_TAC "@p dir. a" `?p dir. GET (ST_ANTS st) a = p,dir` THENL
  [MESON_TAC[PAIR_SURJECTIVE]; ASM_REWRITE_TAC[]] THEN
  REWRITE_TAC[FORALL_PAIRED_THM; ANT_STEP] THEN
  REPEAT GEN_TAC THEN
  COND_CASES_TAC THENL
  [POP_ASSUM SUBST_VAR_TAC THEN
   SUBGOAL_THEN `~(GET (ST_STIGMERGY st) 1 < GET (ST_STIGMERGY st) 2)` (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s21" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   SUBGOAL_THEN `GET (ST_STIGMERGY st) 2 < GET (ST_STIGMERGY st) 1` (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s21" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; PAIR_EQ] THEN SIMP_TAC[];
   ALL_TAC] THEN
  COND_CASES_TAC THENL
  [POP_ASSUM SUBST_VAR_TAC THEN
   SUBGOAL_THEN `~(GET (ST_STIGMERGY st) 1 < GET (ST_STIGMERGY st) 3)` (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s31" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   SUBGOAL_THEN `GET (ST_STIGMERGY st) 3 < GET (ST_STIGMERGY st) 1` (fun th -> REWRITE_TAC[th]) THENL
   [REMOVE_THEN "s31" MP_TAC THEN ARITH_TAC; ALL_TAC] THEN
   REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; PAIR_EQ] THEN SIMP_TAC[];
   ALL_TAC] THEN  
  SUBGOAL_THEN `~(p = 2)` (fun th -> REWRITE_TAC[th]) THENL
  [REMOVE_THEN "hp1" (MP_TAC o SPEC `a:num`) THEN ASM_REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY]  THEN ARITH_TAC; ALL_TAC] THEN
  SUBGOAL_THEN `~(p = 3)` (fun th -> REWRITE_TAC[th]) THENL
  [REMOVE_THEN "hp1" (MP_TAC o SPEC `a:num`) THEN ASM_REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY]  THEN ARITH_TAC; ALL_TAC] THEN
  REPEAT (COND_CASES_TAC THEN REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; PAIR_EQ] THEN SIMP_TAC[]));;

g `!st. {1,2,3} SUBSET KEYS (ST_INHABITANTS st) /\ PATH1 st
        ==> !s. s IN EVOLUTION_STEP st ==> PATH1 s`;;
GEN_TAC
REWRITE_TAC[PATH0; SUBSET; FORALL_IN_INSERT; NOT_IN_EMPTY; GE; PATH1]
INTRO_TAC "(k1 k2 k3) p1"
REWRITE_TAC[EVOLUTION_STEP; FORALL_IN_IMAGE; IN_DICT_COLLECT; KEYS_DICT_MAP; GET_DICT_MAP]
SIMP_TAC[]
INTRO_TAC "![d]; keys get"


g `!st. PATH0 st
        ==> eventually (\n. PATH1 (EVOLUTION st n)) sequentially`;;

GEN_TAC
REWRITE_TAC[PATH0; SUBSET; FORALL_IN_INSERT; NOT_IN_EMPTY; GE]
INTRO_TAC "(k1 k2 k3) s21 s31 i21 i31"
REWRITE_TAC[EVENTUALLY_SEQUENTIALLY]
EXISTS_TAC `2` *)
